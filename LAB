public class BinarySearchTree {
    private BstNode root;

    public boolean isEmpty() {
        return (this.root == null);
    }

    public void insert(Integer data) {

        System.out.print("[input: " + data + "]");
        if (root == null) {
            this.root = new BstNode(data);
            System.out.println(" -> inserted: " + data);
            return;
        }
        insertNode(this.root, data);
        System.out.print(" -> inserted: " + data);
        System.out.println();
    }

    private BstNode insertNode(BstNode root, Integer data) {

        BstNode tmpNode = null;
        System.out.print(" ->" + root.getData());
        if (root.getData() >= data) {
            System.out.print(" [L]");
            if (root.getLeft() == null) {
                root.setLeft(new BstNode(data));
                return root.getLeft();
            } else {
                tmpNode = root.getLeft();
            }
        } else {
            System.out.print(" [R]");
            if (root.getRight() == null) {
                root.setRight(new BstNode(data));
                return root.getRight();
            } else {
                tmpNode = root.getRight();
            }
        }
        return insertNode(tmpNode, data);
    }

// ToDo 1: complete InOrder Traversal 

    public void inOrderTraversal() {
        doInOrder(this.root);
    }

    private void doInOrder(BstNode root) {
        if (root != null) {
        doInOrder(root.getLeft()); 
        System.out.print(root.getData() + " "); 
        doInOrder(root.getRight()); 
        }
    }
         // ToDo 2: complete the pre-order travesal 

        public void preOrderTraversal() {
        doPreOrder(this.root);
    }
        private void doPreOrder(BstNode root) {
            if (root != null) {
            System.out.print(root.getData() + " "); 
            doPreOrder(root.getLeft()); 
            doPreOrder(root.getRight()); 
    }
}
    }


  // ToDo 3: Find the height of a tree

   public Integer findHeight() {
    return calculateHeight(this.root);
}

private Integer calculateHeight(BstNode node) {
    if (node == null) {
        return -1; 
    }
    
    int leftHeight = calculateHeight(node.getLeft());
    int rightHeight = calculateHeight(node.getRight());

    return Math.max(leftHeight, rightHeight) + 1;
}
    }

    
   //ToDo 4: complete getDepth of a node 

   public int getDepth(BstNode node) {
    return calculateDepth(this.root, node, 0);
}

private int calculateDepth(BstNode current, BstNode target, int depth) {
    if (current == null) {
        return -1; 
    }
    
    if (current == target) {
        return depth; 
    }
    
    int leftDepth = calculateDepth(current.getLeft(), target, depth + 1);
    int rightDepth = calculateDepth(current.getRight(), target, depth + 1);
    
    return Math.max(leftDepth, rightDepth);
}    
    }

    // ToDo 5: complete the print of the BST
   public void print() {
       System.out.println("\n==== BST Print ===== \n");
        print("", root, false);

   private void printTree(BstNode node, int depth) {
    if (node != null) {
        printTree(node.getRight(), depth + 1);
        for (int i = 0; i < depth; i++) {
            System.out.print("   "); 
        }
        System.out.println(node.getData());
        printTree(node.getLeft(), depth + 1);
    }
}
  
